using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;
using System.Linq;

namespace ExpFinance
{
    public partial class MainForm : Form
    {
        public static string NomClient;
        public MainForm()
        {
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            try
            {
              dateTimePicker.MinDate = dateTimePicker.Value = new DateTime(DateTime.Now.Year, 1, 1);

                // This line of code is generated by Data Source Configuration Wizard
                dossiersPromotionTableAdapter1.Fill(bordereauDataSet2.DossiersPromotion, dateTimePicker.MinDate);
                gridView.CustomFilterDialog += (snd, ev) => { ev.Handled = true; };
            }
            catch (Exception ex)
            {
                Messages.Error("Erreur connexion au serveur: "+ex.Message);
                Close();
            }


        }


        private void gridView_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            SetDetails(gridView.FocusedRowHandle);
        }

        #region View


        void RefreshTable()
        {
            try
            {
                Cursor.Current = Cursors.WaitCursor;
                // This line of code is generated by Data Source Configuration Wizard
                var selected = gridView.GetSelectedRows();
                var focused = gridView.FocusedRowHandle;
                dossiersPromotionTableAdapter1.Fill(bordereauDataSet2.DossiersPromotion, dateTimePicker.Value);
                if (selected.Count() > 0) gridView.SelectRows(selected.First(), selected.Last());
                gridView.FocusedRowHandle = focused;
                Cursor.Current = Cursors.Default;
            }
            catch (Exception e)
            {
                
               Messages.Error("Erreur lecture de données.");
                ErrorLog.LogError("refresh table",e);
            }

        }

        void SetDetails(int row)
        {
            try
            {
                //getting details
                var details = new DetailsDossier();
                var idg = TableGetID_GF(row);
                if (idg == 0) return;

                var groupe = details.GetGroupeInfo(idg);

                if (groupe == null) return;

                var promotion = details.GetPromoInfo(groupe.ID_LIGNE ?? 0);

                //getting invoices nums
                var factures = details.GetFactures(idg);
                var listeFactures = "";
                factures.ForEach(x => listeFactures += x.NUM_FACT + @" | ");
                listeFactures = listeFactures.Remove(listeFactures.Length - 2);
                tableFactures.Controls.Clear();
                int i = 0, l = 0;
                factures.ForEach(f =>
                {
                    if (i > 5)
                    {
                        i = 0;
                        l++;
                    }
                    var linkFacture = new LinkLabel { Text = ((int)f.NUM_FACT).ToString("D"), LinkColor = Color.DimGray, Font = new Font("Segoe UI Semibold", 8.5F, FontStyle.Bold, GraphicsUnit.Point, ((0))) };
                    linkFacture.Click += (sender, args) => ViewFacture(f.NUM_FACT, f.CODE_CLIENT, f.ENTITE);
                    tableFactures.Controls.Add(linkFacture, i, l);
                    i++;
                });


                //Setting details to the view
                textBoxPromotion.Text = promotion.NOM_PROMOTION;
                NomClient = textBoxClient.Text = TableGetClientName(row);
                textBoxFactures.Text = listeFactures;
                textBoxDateD.Text = groupe.DATE_DOSSIER != null ? groupe.DATE_DOSSIER.Value.ToShortDateString() : default(string);


                decimal txRest = 0;
                decimal.TryParse(groupe.REF_RISTOURNE, out txRest);
                if (groupe.MONTANT_RISTOURNE > 0) decimal.TryParse(groupe.REF_RISTOURNE, out txRest); else txRest=groupe.TX_REST ?? 0;

                textBoxNumDossier.Text = groupe.NDOSSIER;
                textBoxMarge.Text = string.Format("{0:#,##0.00 Da}", groupe.MARGE);
                textBoxMarge.Text += @" ( " + string.Format("{0:P2}", groupe.MARGE / groupe.MNT_TTC) + @" )";
                textBoxMargeRest.Text = string.Format("{0:#,##0.00 Da}", groupe.MARGE_REST - groupe.MONTANT_RISTOURNE ?? 0);
                textBoxMargeRest.Text += @" ( " + string.Format("{0:P2}", txRest / 100) + @" )";
                textBoxTypePromo.Text = groupe.TYPE_PROMOTION;
            }
            catch (Exception ex)
            {
                
                Messages.Error("Erreur lecture de données");
                ErrorLog.LogError("set details",ex);
                Close();
            }

            

        }


        private void ViewFacture(decimal num,string client,string entite)
        {
            var report = new DetailsFactureForm(entite, client, num);
            report.ShowDialog();
        }

        #endregion

        #region TableReader


        //return the ID_GroupeFacture of the selected row
        int TableGetID_GF(int row)
        {
            return Convert.ToInt32(gridView.GetRowCellValue(row, colID_GROUPE_FACT));

        }

        //return the ID_GroupeFacture of the selected rows
        IEnumerable<int> GetSelectedGroups(IEnumerable<int> rows)
        {
            return rows.Select(TableGetID_GF).ToArray();
            
        }

        string TableGetClientName(int row)
        {
            return gridView.GetRowCellValue(row, colNOM).ToString();
        }

        decimal TableGetTotal(int[] rows)
        {
            decimal v=0,total=0;
            total += rows.Select(row => gridView.GetRowCellValue(row, colTotal).ToString()).Where(value => decimal.TryParse(value, out v)).Sum(value => v);
            return total;
        }

        #endregion

        #region Clicks

        private void gridView_MouseDown(object sender, MouseEventArgs e)
        {

        }

        private void labelInstance_Click(object sender, EventArgs e)
        {
            try
            {
                //EN INSTANCE
                var rows = gridView.GetSelectedRows();
                if (!SetEtat(GetSelectedGroups(rows), 0)) return;
                RefreshTable();
                gridView.SelectRow(rows[0]);
                Alert("Dossier(s) marqué(s) en instance", 1);
            }
            catch (Exception ex)
            {
                Messages.Error(ex.Message);
            }
        }

        private void labelRecu_Click(object sender, EventArgs e)
        {
            try
            {
                //RECU
                var rows = gridView.GetSelectedRows();
                if (!SetEtat(GetSelectedGroups(rows), 2)) return;
                RefreshTable();
                gridView.SelectRow(rows[0]);
                Alert("Dossier(s) marqué(s)  comme reçu(s)", 1);
            }
            catch (Exception ex)
            {
                Messages.Error(ex.Message);
            }
        }

        private void labelRejet_Click(object sender, EventArgs e)
        {
            try
            {
                //REJETE
                var rows = gridView.GetSelectedRows();
                if (!SetEtat(GetSelectedGroups(rows), 1)) return;
                RefreshTable();
                gridView.SelectRow(rows[0]);
                Alert("Dossier marqué comme rejeté", 1);

            }
            catch (Exception ex)
            {
                Messages.Error(ex.Message);
            }
        }

        private void buttonGenerAvoir_Click(object sender, EventArgs e)
        {
            if (gridView.FocusedValue == null) return;
            if (gridView.GetSelectedRows().Count() == 0) return;
            var rows = gridView.GetSelectedRows();
            var detail = new DetailsDossier();

            if (rows.Count() > 1)
            {
                var client = TableGetClientName(rows[0]);
                if (rows.Any(r => TableGetClientName(r) != client))
                {
                    Alert("Veuillez sélectionner les dossier d'un seul client !!");
                    return;
                }
            }
            else
            {
                //if it is validated

            }

            
            if (rows.Any(r=>detail.GetState(TableGetID_GF(r))!=2) )
            {
                Alert("Seul les dossiers reçus peuvent être traité !!");
                return;
            }
            
            var avrf = new AvoirForm(GetSelectedGroups(rows).ToList(), TableGetTotal(rows));

            avrf.Closed += AvrfOnClosed;
            avrf.ShowDialog();
        }

        private void AvrfOnClosed(object sender, EventArgs eventArgs)
        {
            RefreshTable();
        }

        private void buttonNouvelAvoir_Click(object sender, EventArgs e)
        {
            var navrf = new NewAvoirForm();
            navrf.ShowDialog();
        }

        private void buttonRapport_Click(object sender, EventArgs e)
        {
            var reportLink = new ProcessStartInfo(Properties.Settings.Default.report);
            Process.Start(reportLink);
        }

        private void buttonCancel_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void pictureBoxGoDate_Click(object sender, EventArgs e)
        {
            gridView.ClearSorting();
            RefreshTable();
        }

    #endregion
    
        #region Data

        private bool SetEtat(IEnumerable<int> idg,byte state)
        {
            try
            {
                if (idg == null) return false;
                idg = idg.ToList();
                if (!idg.Any()) return false;

                using (var model = new ExpFinanceEntities())
                {
                    //If reject treat only one entry
                    if (state == 1)
                    {
                        var g = idg.LastOrDefault();

                        var oldState = (from e in model.AF_ETAT_AVOIR
                                        where e.IDG == g
                                        orderby e.dateHeure descending
                                        select e.Etat).FirstOrDefault();

                        //return if already rejected or if validated
                        if (oldState == state || oldState == 3)
                        {
                            Cursor.Current = Cursors.Default;
                            return false;
                        }

                        var obs = Prompt.ShowDialog("Motif de rejet", "Observation");

                        var etat = new AF_ETAT_AVOIR
                        {
                            IDG = g,
                            Etat = state,
                            dateHeure = DateTime.Now,
                            observation = obs
                        };

                        var op=new AF_OPS_LOG
                        {
                            instant = DateTime.Now,
                            Operation = $"Etat mis à {state}",
                            username = Environment.UserName,
                            idg=g
                        };

                        model.AF_OPS_LOG.Add(op);
                        model.AF_ETAT_AVOIR.Add(etat);
                        model.SaveChanges();
                        return true;
                    }

                    Cursor.Current = Cursors.WaitCursor;
                    foreach (int g in idg)
                    {
                        //Check the last state
                        var oldState = (from e in model.AF_ETAT_AVOIR 
                                        where e.IDG == g 
                                        orderby e.dateHeure descending 
                                        select e.Etat).FirstOrDefault();

                        if (oldState == state) continue;
                        //return if validated
                        if (oldState == 3)
                        {
                            Cursor.Current = Cursors.Default;
                            return false;
                        }

                        var etat = new AF_ETAT_AVOIR
                        {
                            IDG = g,
                            Etat = state,
                            dateHeure = DateTime.Now
                        };

                        var op = new AF_OPS_LOG
                        {
                            instant = DateTime.Now,
                            Operation = $"Etat mis à {state}",
                            username = Environment.UserName,
                            idg = g
                            
                        };

                        model.AF_OPS_LOG.Add(op);
                        model.AF_ETAT_AVOIR.Add(etat);
                    }

                    model.SaveChanges();
                    Cursor.Current = Cursors.Default;
                    return true;
                }
            }
            catch (Exception e)
            {
                Messages.Error("Error edit etat: "+e.Message);
                return false;
            }

        }



        #endregion


        #region MISC

        private void gridView_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {


                //REJETE
                if (e.KeyCode == Keys.F1)
                {
                    
                    var rows = gridView.GetSelectedRows();
                    if (!SetEtat(GetSelectedGroups(rows), 1)) return;
                    RefreshTable();
                    gridView.SelectRow(rows[0]);
                    Alert("Dossier marqué comme rejeté", 1);
                }

                //RECU
                if (e.KeyCode == Keys.F2)
                {
                    var rows = gridView.GetSelectedRows();
                    if (!SetEtat(GetSelectedGroups(rows), 2)) return;
                    RefreshTable();
                    gridView.SelectRow(rows[0]);
                    Alert("Dossier(s) marqué(s)  comme reçu(s)", 1);
                }

                //EN INSTANCE
                if (e.KeyCode == Keys.F3)
                {
                    var rows = gridView.GetSelectedRows();
                    if (!SetEtat(GetSelectedGroups(rows), 0)) return;
                    RefreshTable();
                    gridView.SelectRow(rows[0]);
                    Alert("Dossier(s) marqué(s) en instance", 1);
                }
            }
            catch (Exception ex)
            {
                
                Messages.Error(ex.Message);
            }

        }

       

        void Alert(string txt,int code=2)
        {
            textBoxAlert.Text = txt;
            textBoxAlert.ForeColor = code == 1 ? Color.Green : Color.Tomato;
        }

        private void MainForm_MouseClick(object sender, MouseEventArgs e)
        {
            Alert(string.Empty);
        }


        #endregion

        private void label9_Click(object sender, EventArgs e)
        {
            //var edit = new EditAvoirsForm();
            //edit.ShowDialog();

            var print = new BulkPrintingForm();
            print.ShowDialog();
        }

        private void gridView_SelectionChanged(object sender, DevExpress.Data.SelectionChangedEventArgs e)
        {
            SetDetails(gridView.FocusedRowHandle);
        }

        private void buttonListeAvoirs_Click(object sender, EventArgs e)
        {
            var edit = new EditAvoirsForm();
            edit.ShowDialog();
        }

        private void logo_Click(object sender, EventArgs e)
        {

            //var bulkInsert = new BulkInserForm();
            //bulkInsert.ShowDialog();

            //var editavoirs= new EditAvoirsForm();
            //editavoirs.ShowDialog();
        }
    }
}
